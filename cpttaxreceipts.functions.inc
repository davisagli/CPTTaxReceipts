<?php

require_once 'tcpdf/tcpdf.php';
require_once('FPDI/fpdi.php');

  class PDF extends FPDI {
    /**
     * "Remembers" the template id of the imported page
     */
    var $_tplIdx;

    var $template;
    var $tax_deductible = false;

    /**
     * include a background template for every page
     */
    function Header() {
      $pdf_template_file = $this->template;
      if (!empty($pdf_template_file)) {

        if (is_null($this->_tplIdx)) {
          $this->setSourceFile($pdf_template_file);
          $this->_tplIdx = $this->importPage(1);
        }
        $this->useTemplate($this->_tplIdx);
      }
      else {
        $this->parsers = array();
      }
    }

    function Footer() {}
  }



  const CPTTAX_SETTINGS = 'cpttaxreceipts';


/**
 * processTaxReceipt()
 * Accepts an associative array containing receipt variables, and:
 * - generates a PDF file using the provided variables
 * - emails the receipt to the donor if issue_method='email'
 *
 * This method is common to both single and annual receipts.
 */
function cpttaxreceipts_processTaxReceipt( $receipt, &$collectedPdf = NULL, $previewMode = FALSE, $template = 'USA' ) {

  // Get contact details
  list($displayname, $email) = CRM_Contact_BAO_Contact::getContactDetails($receipt['contact_id']);

  // generate the PDF file
  list($pdf_file, $user_friendly) = cpttaxreceipts_generateFormattedReceipt( $receipt, $collectedPdf, $previewMode, $template );

  // form a mailParams array to pass to the CiviCRM mail utility
  $attachment = array(
    'fullPath' => $pdf_file,
    'mime_type' => 'application/pdf',
    'cleanName' => $user_friendly,
  );

  $email_message = CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'email_message');
  $org_name = CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'org_name');

  $email_subject_admin = CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'email_subject');
  $email_subject = $email_subject_admin . " " . $receipt['receipt_no'];

  $email_from = CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'email_from');
  $email_archive = CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'email_archive');

  $mailparams = array(
    'from' => $org_name . ' <' . $email_from . '> ',
    'toName' => $displayname,
    'attachments' => array( $attachment ),
    'subject' => $email_subject,
    'text' => $email_message,
    'returnPath' => $email_from,
  );

  // if method is email, we send to contact and BCC email archive.
  // if method is print, we send to email archive only.
  if ( $receipt['issue_method'] == 'email' ) {
    $mailparams['toEmail'] = $email;
    if ( $email_archive) {
      $mailparams['bcc'] = $email_archive;
    }
  }
  elseif ( $email_archive ) {
    $mailparams['toEmail'] = $email_archive;
  }

  $ret = TRUE;
  if ( !$previewMode && $mailparams['toEmail'] ) {
    $ret = CRM_Utils_Mail::send( $mailparams );
  }

  if ( $receipt['issue_method'] == 'email' ) {
    unlink($pdf_file); // file is no longer needed
    return array( $ret, 'email', NULL );
  }
  else {
    if ( isset($collectedPdf) ) {
      unlink($pdf_file); // file is no longer needed
      $pdf_file = NULL;
    }
    // if not unset, cron will clean up the PDF file later on
    return array( $ret, 'print', $pdf_file );
  }
}

/**
 * generateFormattedReceipt()
 * Accepts an associative array of receipt variables and produces a PDF file.
 * This function should always be called through processTaxReceipt().  It is imperative
 * that each receipt generated by the system gets logged and archived properly.
 */
function cpttaxreceipts_generateFormattedReceipt( $receipt, &$collectedPdf = NULL, $previewMode = FALSE, $template = 'USA' ) {
  //  define ('K_PATH_IMAGES', '');
  require_once 'tcpdf/tcpdf.php';

  $pdf_img_files_path = dirname(__FILE__) . '/img/';

  $address = cpttaxreceipts_getAddress($receipt['contact_id']);

  $address_line_1 = isset($address['street_address']) ? $address['street_address'] : '';
  $parts = array();
  foreach(array('city', 'state_province', 'postal_code')  as $addr_part) {
    if (isset($address[$addr_part])) {
      $parts[] = $address[$addr_part] . ($addr_part == 'city' ? ',' : '');
    }
  }
  $address_line_1b = isset($address['supplemental_address_1']) ? $address['supplemental_address_1'] : '';
  $address_line_2 = implode(' ', $parts);
  $address_line_3 = isset($address['country']) ? $address['country'] : '';

  list($displayname, $email) = CRM_Contact_BAO_Contact::getContactDetails($receipt['contact_id']);
  $display_year = $receipt['receive_date'];
  $display_date = date('M j, Y', mktime(0,0,0,1,1,$receipt['receive_date'])) . ' - ' . date('M j, Y', mktime(0,0,0,12,31,$receipt['receive_date']));

  $thankyou = "Thank you for your contribution!";
  $tax_notice_1 = "In the US, contributions are tax-deductible. CPT's tax ID number is 36-3174662.";
  $tax_notice_2 = "No goods or services were provided to the donors in exchange for this contribution.";

  $config = CRM_Core_Config::singleton();
  $pdf_file = $config->customFileUploadDir . 'Receipt-' . $receipt['receipt_no'] . '.pdf';
  $user_friendly = 'Receipt-' . $receipt['receipt_no'] . '.pdf';

  if (!defined('pdf_page_format')) {
    define('PDF_PAGE_FORMAT', 'USLETTER', true); // orig: 'A4'
  }
  $pdf = new PDF(PDF_PAGE_ORIENTATION, PDF_UNIT, 'LETTER', TRUE, 'UTF-8', FALSE);
  if ($template == 'USA') {
    $pdf->template = CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'receipt_pdftemplate');
    $pdf->tax_deductible = true;
  } elseif ( $template == 'Canada' ) {
    $pdf->template = CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'receipt_pdftemplate_canada');
    $pdf->tax_deductible = false;
  }
  $pdf->Open();

  $pdf->SetAuthor(CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'org_name'));

  $mymargin_left = 12;
  $mymargin_top = 6;
  $mymargin_right = 12;
  $pdf->SetMargins($mymargin_left, $mymargin_top, $mymargin_right);
  $pdf->SetAutoPageBreak(TRUE, 12);

  $pdf->setJPEGQuality('100');

  $pdf_variables = array(
    "preview_mode" => $previewMode,
    "mymargin_left" => $mymargin_left,
    "mymargin_top" => $mymargin_top,
    "pdf_img_files_path" => $pdf_img_files_path,
    "thankyou" => $thankyou,
    "tax_notice_1" => $tax_notice_1,
    "tax_notice_2" => $tax_notice_2,
    "amount" => $receipt['receipt_amount'],
    "display_date" => $display_date,
    "display_year" => $display_year,
    "issued_on" => date('n/j/Y', $receipt['issued_on']),
    "issue_type" => $receipt['issue_type'],
    "receipt_number" => $receipt['receipt_no'],
    "displayname" => $displayname,
    "address_line_1" => $address_line_1,
    "address_line_1b" => $address_line_1b,
    "address_line_2" => $address_line_2,
    "address_line_3" => $address_line_3,
    "receipt_contributions" => $receipt['contributions'],
  );

  $output_files = array($pdf);
  if ( isset($collectedPdf) && ( $receipt['issue_method'] == 'print' || $previewMode ) ) {
    $output_files[] = $collectedPdf;
  }

  foreach ( $output_files as $f ) {
    $f->AddPage();

    // print original AND duplicate copy
    $pdf_variables["mymargin_top"] = $mymargin_top;
    cpttaxreceipts_createPDF($f, $pdf_variables);
  }

  // close and output the single receipt, but not the collected receipts...
  $pdf->Close();
  $pdf->Output($pdf_file, 'F');

  return array($pdf_file, $user_friendly);
}

function cpttaxreceipts_createPDF(&$pdf, $pdf_variables) {

  // Extract variables
  $preview_mode = $pdf_variables["preview_mode"];
  $mymargin_left = $pdf_variables["mymargin_left"];
  $mymargin_top = $pdf_variables["mymargin_top"];
  $pdf_img_files_path = $pdf_variables["pdf_img_files_path"];
  $thankyou = $pdf_variables["thankyou"];
  $tax_notice_1 = $pdf_variables["tax_notice_1"];
  $tax_notice_2 = $pdf_variables["tax_notice_2"];
  $amount = $pdf_variables["amount"];
  $display_date = $pdf_variables["display_date"];
  $issued_on = $pdf_variables["issued_on"];
  $receipt_number = $pdf_variables["receipt_number"];
  $displayname = $pdf_variables["displayname"];
  $address_line_1 = $pdf_variables["address_line_1"];
  $address_line_1b = $pdf_variables["address_line_1b"];
  $address_line_2 = $pdf_variables["address_line_2"];
  $address_line_3 = $pdf_variables["address_line_3"];
  $display_year = $pdf_variables["display_year"];
  $issue_type = $pdf_variables["issue_type"];
  $receipt_contributions = $pdf_variables['receipt_contributions'];

  $detail_heading = "donation summary / receipt for $display_date";

  // Middle center section
  if ( $preview_mode ) {
    $pdf->Image($pdf_img_files_path . 'preview_mode.png', $mymargin_left + 65, $mymargin_top, '', 45);
  }
  // Top left section
  $pdf_template_file = $pdf->template;
  if (!empty($pdf_template_file)) {
  }
  else {
    $pdf->Image(CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'receipt_logo', NULL, $pdf_img_files_path . 'your-logo.png'), $mymargin_left, $mymargin_top, '', 30);

    // Top right section
    $pdf->SetFont('Helvetica', '', 8);
    $pdf->SetY($mymargin_top);
    $pdf->Write(10, CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'org_name'), '', 0, 'R', TRUE, 0, FALSE, FALSE, 0);
    $pdf->SetY($mymargin_top + 4);
    $pdf->Write(10, CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'org_address_line1'), '', 0, 'R', TRUE, 0, FALSE, FALSE, 0);
    $pdf->SetY($mymargin_top + 8);
    $pdf->Write(10, CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'org_address_line2'), '', 0, 'R', TRUE, 0, FALSE, FALSE, 0);
    $pdf->SetY($mymargin_top + 12);
    if ( CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'org_fax' ) == '' ) {
      $pdf->Write(10, 'Tel: ' . CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'org_tel'), '', 0, 'R', TRUE, 0, FALSE, FALSE, 0);
    } else {
      $pdf->Write(10, 'Tel: ' . CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'org_tel') . '; Fax: ' . CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'org_fax'), '', 0, 'R', TRUE, 0, FALSE, FALSE, 0);
    }
    $pdf->SetFont('Helvetica', 'I', 8);
    $pdf->SetY($mymargin_top + 16);
    $pdf->Write(10, 'Email: ' . CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'org_email') . '; Website: ' . CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'org_web'), '', 0, 'R', TRUE, 0, FALSE, FALSE, 0);
    $pdf->SetY($mymargin_top + 20);
    $pdf->Write(10, 'Tax ID #: ' . CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'org_charitable_no'), '', 0, 'R', TRUE, 0, FALSE, FALSE, 0);
  }

  // Right section
  $x_detailscolumn = 140;
  $y_detailscolumnstart = 22;
  if (!empty($pdf_template_file)) {
  } else {
    $background_image = CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'receipt_watermark');
    if ( $background_image ) $pdf->Image(CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'receipt_watermark'), $mymargin_left + $x_detailscolumn, $mymargin_top + $y_detailscolumnstart + 6, '', 40);
  }
  $pdf->SetFont('Helvetica', 'B', 8);
  $pdf->SetXY($mymargin_left + $x_detailscolumn, $mymargin_top + $y_detailscolumnstart + 16);
  $pdf->Write(10, "Receipt No: " . $receipt_number);
  $pdf->SetXY($mymargin_left + $x_detailscolumn, $mymargin_top + $y_detailscolumnstart + 20);
  $pdf->Write(10, "Issue Date: " . $issued_on);

  // Left section
  $pdf->SetFont('Helvetica', 'B', 10);
  $pdf->SetXY($mymargin_left+10, $mymargin_top + $y_detailscolumnstart + 20);
  $pdf->Write(10, strtoupper($displayname), '', 0, 'L', TRUE, 0, FALSE, FALSE, 0);

  if (!$address_line_1b){
    $pdf->SetFont('Helvetica', '', 10);
    $pdf->SetXY($mymargin_left+10, $mymargin_top + $y_detailscolumnstart + 24);
    $pdf->Write(10, strtoupper($address_line_1), '', 0, 'L', TRUE, 0, FALSE, FALSE, 0);
    $pdf->SetXY($mymargin_left+10, $mymargin_top + $y_detailscolumnstart + 28);
    $pdf->Write(10, strtoupper($address_line_2), '', 0, 'L', TRUE, 0, FALSE, FALSE, 0);
    $pdf->SetXY($mymargin_left+10, $mymargin_top + $y_detailscolumnstart + 32);
    $pdf->Write(10, strtoupper($address_line_3), '', 0, 'L', TRUE, 0, FALSE, FALSE, 0);
  }
  else {
    $pdf->SetFont('Helvetica', '', 10);
    $pdf->SetXY($mymargin_left+10, $mymargin_top + $y_detailscolumnstart + 24);
    $pdf->Write(10, strtoupper($address_line_1), '', 0, 'L', TRUE, 0, FALSE, FALSE, 0);
    $pdf->SetXY($mymargin_left+10, $mymargin_top + $y_detailscolumnstart + 28);
    $pdf->Write(10, strtoupper($address_line_1b), '', 0, 'L', TRUE, 0, FALSE, FALSE, 0);
    $pdf->SetXY($mymargin_left+10, $mymargin_top + $y_detailscolumnstart + 32);
    $pdf->Write(10, strtoupper($address_line_2), '', 0, 'L', TRUE, 0, FALSE, FALSE, 0);
    $pdf->SetXY($mymargin_left+10, $mymargin_top + $y_detailscolumnstart + 36);
    $pdf->Write(10, strtoupper($address_line_3), '', 0, 'L', TRUE, 0, FALSE, FALSE, 0);
  }

  // Contribution details
  $pdf->setFont('Helvetica', 'B', 10);
  $pdf->setXY($mymargin_left + 15, 80);
  $pdf->Write(8, $detail_heading, '', 0, 'L', TRUE, 0, FALSE, FALSE, 0);
  $pdf->setFont('Helvetica', '', 8);
  $page_width = $pdf->getPageWidth();
  $pdf->setXY($mymargin_left + 15, 88);
  $i = 0;
  $perpage = 19;
  foreach ( $receipt_contributions as $contrib ) {
    $i += 1;
    $pdf->setX($mymargin_left + 15);
    $date = new DateTime($contrib['receive_date']);
    $formatted_date = $date->format('n/j/Y');
    $pdf->Cell(25, 8, $formatted_date, 0, 0, 'L');
    $formatted_source = substr($contrib['source'], 0, 50);
    $pdf->Cell(100, 8, $formatted_source, 0, 0, 'L');
    $formatted_amount = money_format('$%.2n', $contrib['receipt_amount']);
    $pdf->Cell(25, 8, $formatted_amount, 0, 1, 'R');
    $pdf->Line($mymargin_left + 15, $pdf->getY(), 176, $pdf->getY());
    if ($i == $perpage) {
      $i = 0;
      $perpage = 24;
      $pdf->AddPage('', '', TRUE);
      $pdf->setY(48);
    }
  }

  // Total
  $pdf->setXY($mymargin_left + 15, $pdf->getY() + 2);
  $pdf->setFont('Helvetica', 'B', 10);
  $pdf->Cell(125, 10, 'TOTAL', 0, 0, 'R');
  $total = money_format('$%.2n', $amount);
  $pdf->Cell(25, 10, $total, 0, 1, 'R');

  // Bottom section
  if ($pdf->tax_deductible) {
    $pdf->setY($pdf->GetY() + 10);
    $pdf->Cell(176, 14, $thankyou, 0, 1, 'C');
    $pdf->setFont('Helvetica', 'I', 8);
    $pdf->Cell(176, 8, $tax_notice_1, 0, 1, 'C');
    $pdf->Cell(176, 8, $tax_notice_2, 0, 0, 'C');
  }

}


/**************************************
 * SECTION: Tax Receipt API
 */


function cpttaxreceipts_eligibleForReceipt( $contributionId ) {
  require_once('CRM/Contribute/DAO/Contribution.php');
  $contribution =  new CRM_Contribute_DAO_Contribution();
  $contribution->id = $contributionId;

  if ( ! $contribution->find( TRUE ) ) {
    CRM_Core_Error::fatal( "cpttaxreceipts: Could not retrieve details for this contribution" );
  }

  // 1. check that contribution amount is deductible
  $deductibleAmount = cpttaxreceipts_eligibleAmount($contributionId);;

  // 2. check if the contribution is of a Type that is indeed Tax receiptable.
  $contributionType =  _cpttaxreceipts_get_type_for_contribution($contribution);

  // 3. check if the Contribution Status is Completed ( i.e. = 1 )
  $contributionStatus = $contribution->contribution_status_id;
  if ( !isset($contributionStatus) ) {
    CRM_Core_Error::fatal( "cpttaxreceipts: Could not find status of this Contribution." );
  }

  // invoke hook_cpttaxreceipts_eligible:
  //   module implementations should return an array containing a single item,
  //   either TRUE or FALSE. assumes TRUE until we receive a FALSE. one FALSE
  //   disqualifies the contribution for a tax receipt.
  $results = CRM_Utils_Hook::singleton()->invoke(1, $contribution, CRM_Utils_Hook::$_nullObject, CRM_Utils_Hook::$_nullObject, CRM_Utils_Hook::$_nullObject, CRM_Utils_Hook::$_nullObject, CRM_Utils_Hook::$_nullObject, 'cpttaxreceipts_eligible');
  $hookOk = TRUE;

  if (is_array($results)) {
    foreach ( $results as $result ) {
      if ( $result == FALSE ) {
        $hookOk = FALSE;
      }
    }
  }

  if ( $contributionType->is_deductible && $contributionStatus == '1' && $contribution->is_test == 0 && $deductibleAmount > 0 && $hookOk ) {
    return TRUE;
  }
  else {
    return FALSE;
  }

}

function cpttaxreceipts_eligibleAmount( $contributionId ) {
  require_once('CRM/Contribute/DAO/Contribution.php');
  $contribution =  new CRM_Contribute_DAO_Contribution();
  $contribution->id = $contributionId;

  if ( ! $contribution->find( TRUE ) ) {
    CRM_Core_Error::fatal( "cpttaxreceipts: Could not retrieve details for this contribution" );
  }

  // 1. calculate deductible amount
  $deductibleAmount = $contribution->total_amount - $contribution->non_deductible_amount;
 
  // 2. allow modules to alter the amount. lowest amount wins.
  $results = CRM_Utils_Hook::singleton()->invoke(1, $contribution, CRM_Utils_Hook::$_nullObject, CRM_Utils_Hook::$_nullObject, CRM_Utils_Hook::$_nullObject, CRM_Utils_Hook::$_nullObject, CRM_Utils_Hook::$_nullObject, 'cpttaxreceipts_eligibleAmount');

  if (is_array($results)) {
    foreach ( $results as $result ) {
      if ( $result < $deductibleAmount ) {
        $deductibleAmount = $result;
      }
    }
  }

  return $deductibleAmount;
}

/**
 * issueAnnualTaxReceipt()
 * Issues an annual tax receipt for a given year.
 * Detects if the receipt is a duplicate and reacts appropriately.
 */
function cpttaxreceipts_issueAnnualTaxReceipt( $contactId, $year, &$collectedPdf = NULL, $previewMode = FALSE, $template = 'USA' ) {

  // determine the send method
  list( $method, $email ) = cpttaxreceipts_sendMethodForContact($contactId);

  $contributions = cpttaxreceipts_contributions($contactId, $year);

  if ( count($contributions) == 0 ) {
    return array(FALSE, $method, NULL);
  }

  // calculate total amount
  $receiptContributions = array();
  $totalReceipt = 0;
  foreach ( $contributions as $c ) {
    $receiptContributions[] = array(
      'contribution_id' => $c['contribution_id'],
      'contribution_amount' => $c['total_amount'],
      'receipt_amount' => cpttaxreceipts_eligibleAmount($c['contribution_id']),
      'receive_date' => $c['receive_date'],
      'source' => $c['source'],
    );
    $totalReceipt += cpttaxreceipts_eligibleAmount($c['contribution_id']);
  }

  // generate a receipt number
  $receiptNo = CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'receipt_prefix') . str_pad($receiptContributions[0]['contribution_id'], 8, 0, STR_PAD_LEFT);

  $receipt = array(
    'receipt_no' => $receiptNo,
    'issued_on' =>  (int) $_SERVER['REQUEST_TIME'],
    'contact_id' => $contactId,
    'receipt_amount' => $totalReceipt,
    'issue_type' => 'annual',
    'issue_method' => $method,
    'receive_date' => $year,
    'contributions' => $receiptContributions,
  );

  return cpttaxreceipts_processTaxReceipt($receipt, $collectedPdf, $previewMode, $template);
}


/* determines the send method for the specified contact
 * returns array, [0] = 'email' or 'print', [1] = email address or NULL
 */
function cpttaxreceipts_sendMethodForContact( $contactId ) {

  $global_email = CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'enable_email', NULL, TRUE);
  if ( ! $global_email ) {
    return array('print', NULL);
  }

  $method = array('print', NULL);
  
  require_once 'CRM/Contact/BAO/Contact.php';
  list($displayname, $email, $doNotEmail, $onHold) = CRM_Contact_BAO_Contact::getContactDetails($contactId);

  if ( isset($email) ) {
    if ( ! $doNotEmail && ! $onHold ) {
      $method = array('email', $email);
    }
  }
  
  // invoke hook_cpttaxreceipts_method:
  //   module implementations should return an array containing a single item,
  //   either 'email' or 'print'. if we receive one or more 'print', the contact
  //   is disqualified from receiving email receipts. 
  $results = CRM_Utils_Hook::singleton()->invoke(1, $contactId, CRM_Utils_Hook::$_nullObject, CRM_Utils_Hook::$_nullObject, CRM_Utils_Hook::$_nullObject, CRM_Utils_Hook::$_nullObject, CRM_Utils_Hook::$_nullObject, 'cpttaxreceipts_method');
  $emailOk = TRUE;

  if (is_array($results)) {
    foreach ( $results as $result ) {
      if ( $result == 'print' ) {
        $method = array('print', NULL);
      }
    }
  }

  return $method;

}


function cpttaxreceipts_openCollectedPDF($template = 'USA') {

  static $pdf;

  if ( ! isset($pdf) ) {
    //define ('K_PATH_IMAGES', '');
    require_once 'tcpdf/tcpdf.php';

    $pdf = new PDF(PDF_PAGE_ORIENTATION, PDF_UNIT, 'LETTER', TRUE, 'UTF-8', FALSE);
    if ($template == 'USA') {
      $pdf->template = CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'receipt_pdftemplate');
      $pdf->tax_deductible = true;
    } elseif ( $template == 'Canada' ) {
      $pdf->template = CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'receipt_pdftemplate_canada');
      $pdf->tax_deductible = false;
    }
    $pdf->Open();

    $pdf->SetAuthor(CRM_Core_BAO_Setting::getItem(CPTTAX_SETTINGS, 'org_name'));

    $mymargin_left = 12;
    $mymargin_top = 6;
    $mymargin_right = 12;
    $pdf->SetMargins($mymargin_left, $mymargin_top, $mymargin_right);

    $pdf->setJPEGQuality('100');

    $pdf->SetAutoPageBreak('', $margin=0);
  }

  return $pdf;

}

function cpttaxreceipts_sendCollectedPDF(&$pdf, $filename) {
  if ( $pdf->getNumPages() > 0 ) {
    $pdf->Output($filename, 'D');
    CRM_Utils_System::civiExit();
  }
  else {
    $pdf->Close();
  }
}

/**
 * Isolate version checking code
 * @param $contribution
 * @return CRM_Contribute_DAO_ContributionType|CRM_Financial_DAO_FinancialType
 */
function _cpttaxreceipts_get_type_for_contribution($contribution) {
  // Require once lines are only needed if the civicrm.settings.php does not have the autoloader line
  require_once 'CRM/Financial/DAO/FinancialType.php';
  $contributionType = new CRM_Financial_DAO_FinancialType();
  $contributionType->id = $contribution->financial_type_id;
  if ( ! $contributionType->find( TRUE ) ) {
    CRM_Core_Error::fatal( "cpttaxreceipts: Could not find corresponding contribution type." );
  }
  return $contributionType;
}


function _cpttaxreceipts_get_contribution_dao() {
  // Require once lines are only needed if the civicrm.settings.php does not have the autoloader line
  require_once 'CRM/Financial/DAO/FinancialType.php';
  $contributionType = new CRM_Financial_DAO_FinancialType();
  return $contributionType;
}


/**
 * Get the correct contact address. Get the billing address followed by the is_primary as a fallback.
 * @param $contact_id
 * @return array|mixed|null address : Contact address fixed with named country and state_province
 */
function cpttaxreceipts_getAddress($contact_id) {

  $address = NULL;
  // get Address information via contact
  $params = array(
    'version' => 3,
    'contact_id' => $contact_id,
    'is_billing' => 1,
  );


  $address_results = civicrm_api('Address', 'get', $params);

  if ( $address_results['is_error'] == 0) {
    $address = array_shift($address_results['values']);
  }

  if (!isset($address)) {
    $params = array(
      'version' => 3,
      'contact_id' => $contact_id,
      'is_primary' => 1,
    );
    $address_results = civicrm_api('Address', 'get', $params);

    if ( $address_results['is_error'] == 0) {
      $address = array_shift($address_results['values']);
    }

  }
  $address = isset($address) ? $address : array();
  // add actual names for province and country instead of just having ids
  require_once 'CRM/Core/BAO/Address.php';
  CRM_Core_BAO_Address::fixAddress($address);

  return $address;
}

/**
 * Returns a setting of CiviCRM.
 *
 * @param string $key the setting to retrieve.
 * @return string the value of the $key setting.
 */
function cdntaxreceipts_getCiviSetting($key) {
  $result = civicrm_api3('Setting', 'get', array(
    'sequential' => 1,
    'return' => array($key),
  ));
  $settings = CRM_Utils_Array::first($result['values']);
  return isset($settings[$key]) ? $settings[$key] : NULL;
}

/**
 * Sets the value of a CiviCRM setting.
 *
 * @param string $key the setting to set.
 * @paramm string $value the value for the setting.
 */
function cdntaxreceipts_setCiviSetting($key, $value) {
  civicrm_api3('Setting', 'create', array(
    'sequential' => 1,
    $key => $value,
  ));
}
